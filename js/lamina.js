// Generated by CoffeeScript 1.7.1
(function() {
  var Sample, audioContext, c, canvas, demoSample, hammer, onFrame;

  Sample = (function() {
    function Sample(url, onReady) {
      var data, source;
      data = null;
      source = null;
      this.load(url);
      this.onReady = onReady;
    }

    Sample.prototype.load = function(url) {
      var request;
      request = new XMLHttpRequest();
      request.open("GET", url, true);
      request.responseType = "arraybuffer";
      request.onload = (function(_this) {
        return function() {
          return audioContext.decodeAudioData(request.response, function(buffer) {
            _this.data = buffer;
            return _this.onReady();
          });
        };
      })(this);
      return request.send();
    };

    Sample.prototype.play = function(time, offset, duration) {
      if (time == null) {
        time = 0;
      }
      if (offset == null) {
        offset = 0;
      }
      this.source = audioContext.createBufferSource();
      this.source.buffer = this.data;
      this.source.connect(audioContext.destination);
      return this.source.start(time, offset, duration);
    };

    Sample.prototype.stop = function(time) {
      if (time == null) {
        time = 0;
      }
      return this.source.stop(time);
    };

    Sample.prototype.drawOn = function(canvas, head) {
      var amp, c, data, height, i, step, width, _i;
      width = canvas.width;
      height = canvas.height;
      data = this.data.getChannelData(0);
      step = Math.ceil(data.length / width);
      amp = height;
      c = canvas.getContext("2d");
      c.clearRect(0, 0, width, height);
      c.beginPath();
      c.moveTo(0, height / 2 + data[0]);
      for (i = _i = 0; 0 <= width ? _i <= width : _i >= width; i = 0 <= width ? ++_i : --_i) {
        c.lineTo(i, height / 2 + data[step * i] * amp);
      }
      c.closePath();
      c.strokeStyle = "green";
      c.stroke();
      if (head) {
        c.beginPath();
        c.moveTo(head, 0);
        c.lineTo(head, height);
        c.closePath();
        c.strokeStyle = "blue";
        return c.stroke();
      }
    };

    return Sample;

  })();

  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  canvas = document.getElementById("c");

  canvas.width = window.innerWidth;

  canvas.height = window.innerHeight;

  c = canvas.getContext("2d");

  audioContext = new AudioContext();

  hammer = Hammer(canvas).on("drag touch", function(event) {
    var offsetSeconds, step, x;
    step = Math.ceil(demoSample.data.length / canvas.width);
    x = event.gesture.center.clientX;
    offsetSeconds = x * step / audioContext.sampleRate;
    demoSample.stop();
    demoSample.play(0, offsetSeconds);
    demoSample.drawOn(canvas, x);
  });

  demoSample = new Sample("samples/demo.wav", function() {
    this.drawOn(canvas);
    this.play();
  });

  onFrame = function(timestamp) {
    requestAnimationFrame(onFrame);
  };

}).call(this);
