// Generated by CoffeeScript 1.7.1
(function() {
  var Launchpad, Sample, audioContext, c, canvas, demoSample, hammer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  demoSample = null;

  Launchpad = (function() {
    function Launchpad(init) {
      this.updateCell = __bind(this.updateCell, this);
      this.onMIDIMessage = __bind(this.onMIDIMessage, this);
      this.onMIDISuccess = __bind(this.onMIDISuccess, this);
      window.navigator.requestMIDIAccess().then(this.onMIDISuccess, this.onMIDIFailure);
      this.init = init;
    }

    Launchpad.prototype.onMIDISuccess = function(access) {
      var midiAccess;
      midiAccess = access;
      this.midiInput = midiAccess.inputs()[0];
      this.midiInput.onmidimessage = this.onMIDIMessage;
      this.midiOutput = midiAccess.outputs()[0];
      console.log("MIDI connected!!");
      return this.init();
    };

    Launchpad.prototype.onMIDIFailure = function(err) {
      return console.log("MIDI Error: ", err.code);
    };

    Launchpad.prototype.onMIDIMessage = function(event) {
      var command, note, velocity, x, y;
      command = event.data[0];
      note = event.data[1];
      velocity = event.data[2];
      console.log(command, note, velocity);
      x = note & 0x0f;
      return y = (note & 0xf0) >> 4;
    };

    Launchpad.prototype.updateCell = function(row, column, red, green) {
      return this.midiOutput.send([0x90, (row << 4) | column, red | (green << 4)]);
    };

    return Launchpad;

  })();

  Sample = (function() {
    function Sample(url, onReady) {
      var data, source;
      data = null;
      source = null;
      this.load(url);
      this.onReady = onReady;
    }

    Sample.prototype.load = function(url) {
      var request;
      request = new XMLHttpRequest();
      request.open("GET", url, true);
      request.responseType = "arraybuffer";
      request.onload = (function(_this) {
        return function() {
          return audioContext.decodeAudioData(request.response, function(buffer) {
            _this.data = buffer;
            return _this.onReady();
          });
        };
      })(this);
      return request.send();
    };

    Sample.prototype.play = function(time, offset, duration) {
      if (time == null) {
        time = 0;
      }
      if (offset == null) {
        offset = 0;
      }
      this.source = audioContext.createBufferSource();
      this.source.buffer = this.data;
      this.source.connect(audioContext.destination);
      return this.source.start(audioContext.currentTime, offset, duration);
    };

    Sample.prototype.stop = function(time) {
      if (time == null) {
        time = 0;
      }
      return this.source.stop(time);
    };

    Sample.prototype.drawOn = function(canvas, head) {
      var amp, c, data, height, i, step, width, _i;
      width = canvas.width;
      height = canvas.height;
      data = this.data.getChannelData(0);
      step = Math.ceil(data.length / width);
      amp = height;
      c = canvas.getContext("2d");
      c.clearRect(0, 0, width, height);
      c.beginPath();
      c.moveTo(0, height / 2 + data[0]);
      for (i = _i = 0; 0 <= width ? _i <= width : _i >= width; i = 0 <= width ? ++_i : --_i) {
        c.lineTo(i, height / 2 + data[step * i] * amp);
      }
      c.closePath();
      c.strokeStyle = "green";
      c.stroke();
      if (head) {
        c.beginPath();
        c.moveTo(head, 0);
        c.lineTo(head, height);
        c.closePath();
        c.strokeStyle = "blue";
        return c.stroke();
      }
    };

    return Sample;

  })();

  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  window.AudioContext = window.AudioContext || window.webkitAudioContext;

  canvas = document.getElementById("c");

  canvas.width = window.innerWidth;

  canvas.height = window.innerHeight;

  c = canvas.getContext("2d");

  audioContext = new AudioContext();

  hammer = Hammer(canvas).on("drag touch", function(event) {
    var offsetSeconds, step, x;
    step = Math.ceil(demoSample.data.length / canvas.width);
    x = event.gesture.center.clientX;
    offsetSeconds = x * step / audioContext.sampleRate;
    demoSample.stop();
    console.log(offsetSeconds);
    demoSample.play(0, offsetSeconds);
    demoSample.drawOn(canvas, x);
  });

  window.addEventListener('load', function() {
    var launchpad, onFrame;
    demoSample = new Sample("samples/demo.wav", function() {
      this.drawOn(canvas);
      this.play();
    });
    onFrame = function(timestamp) {
      requestAnimationFrame(onFrame);
    };
    requestAnimationFrame(onFrame);
    return launchpad = new Launchpad(function() {
      var i, j, _i, _results;
      _results = [];
      for (i = _i = 0; _i < 8; i = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (j = _j = 0; _j < 8; j = ++_j) {
            _results1.push(launchpad.updateCell(i, j, 0, 3));
          }
          return _results1;
        })());
      }
      return _results;
    });
  });

}).call(this);
